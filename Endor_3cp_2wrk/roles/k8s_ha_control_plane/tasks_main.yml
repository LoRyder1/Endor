---
- name: Initialize first control plane node
  ansible.builtin.shell: >
    kubeadm init --control-plane-endpoint "{{ control_plane_lb_ip }}" --upload-certs --pod-network-cidr={{ pod_network_cidr }}
  when: inventory_hostname == 'k8s-control-plane-1'
  register: kubeadm_init_output
  
- name: Get join token and certificate key
  ansible.builtin.shell: >
    kubeadm token create --print-join-command
  register: join_command_output
  when: inventory_hostname == 'k8s-control-plane-1'
  
- name: Save join command to a local file
  ansible.builtin.copy:
    content: "{{ join_command_output.stdout }}"
    dest: "/tmp/kube_join_command.sh"
    mode: '0755'
  delegate_to: localhost
  when: inventory_hostname == 'k8s-control-plane-1'

- name: Get discovery token for control plane nodes
  ansible.builtin.shell: >
    kubeadm token create --print-join-command | awk '{ print $5 }'
  register: control_plane_token
  when: inventory_hostname == 'k8s-control-plane-1'

- name: Get discovery hash
  ansible.builtin.shell: >
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: discovery_hash
  when: inventory_hostname == 'k8s-control-plane-1'

- name: Join other control plane nodes to the cluster
  ansible.builtin.command: >
    kubeadm join {{ control_plane_lb_ip }}:6443 --token {{ hostvars['k8s-control-plane-1']['control_plane_token'].stdout }} --discovery-token-ca-cert-hash sha256:{{ hostvars['k8s-control-plane-1']['discovery_hash'].stdout }} --control-plane --certificate-key {{ certificate_key }}
  when: inventory_hostname != 'k8s-control-plane-1'
  vars:
    certificate_key: "{{ kubeadm_init_output.stdout | regex_search('certificate-key\\s+(.*)') | default(['',''])[1] }}"
    
# This part is for the Load Balancer setup, which could be a separate role
- name: Install a Pod Network (Flannel)
  ansible.builtin.shell: "kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml"
  when: inventory_hostname == 'k8s-control-plane-1'
  
# Now configure the load balancer for the control plane.
# For simplicity, we use the `kube-vip` project, which runs as a pod
# and handles a virtual IP (VIP) for the control plane.
- name: Download kube-vip manifest
  ansible.builtin.get_url:
    url: "https://kube-vip.io/manifests/kube-vip-manifest.yaml"
    dest: "/etc/kubernetes/manifests/kube-vip.yaml"
    mode: '0644'
  when: inventory_hostname == 'k8s-control-plane-1'
  
- name: Update kube-vip manifest with the virtual IP
  ansible.builtin.replace:
    path: "/etc/kubernetes/manifests/kube-vip.yaml"
    regexp: 'VIP_IP_ADDRESS'
    replace: "{{ control_plane_lb_ip }}"
  when: inventory_hostname == 'k8s-control-plane-1'