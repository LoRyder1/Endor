---
- name: Setup PostgreSQL Primary and Replica
  hosts: database
  become: yes

  vars:
    postgres_version: "15"
    db_user: "appuser"
    db_password: "password123" # In production, use Ansible Vault
    replication_user: "replicator"
    replication_password: "replication_password123" # In production, use Ansible Vault

  tasks:
    - name: Ensure PostgreSQL Yum repository is configured
      ansible.builtin.yum_repository:
        name: "postgresql{{ postgres_version }}"
        description: "PostgreSQL {{ postgres_version }} Yum Repository"
        baseurl: "https://download.postgresql.org/pub/repos/yum/{{ postgres_version }}/redhat/rhel-9-x86_64"
        gpgkey: "https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG"
        gpgcheck: yes
        enabled: yes
      tags:
        - install

    - name: Install PostgreSQL server and extensions
      ansible.builtin.yum:
        name: "postgresql{{ postgres_version }}-server"
        state: present
      tags:
        - install

    - name: Initialize the database cluster (if not already done)
      ansible.builtin.command: "/usr/pgsql-{{ postgres_version }}/bin/postgresql-{{ postgres_version }}-setup initdb"
      args:
        creates: "/var/lib/pgsql/{{ postgres_version }}/data/postgresql.conf"
      tags:
        - install

    - name: Ensure PostgreSQL service is enabled and started
      ansible.builtin.service:
        name: "postgresql-{{ postgres_version }}"
        state: started
        enabled: yes
      tags:
        - config

    # ----------------------------------
    # Section 1: Primary Node Configuration (run on the first database VM)
    # ----------------------------------
    - name: Configure primary node for replication
      when: inventory_hostname == groups['database'][0]
      block:
        - name: Copy postgresql.conf template to primary node
          ansible.builtin.template:
            src: files/postgresql.conf.j2
            dest: "/var/lib/pgsql/{{ postgres_version }}/data/postgresql.conf"
            owner: postgres
            group: postgres
            mode: '0600'
          notify: Restart PostgreSQL

        - name: Create archive directory on primary
          ansible.builtin.file:
            path: "/var/lib/pgsql/{{ postgres_version }}/data/archive"
            state: directory
            owner: postgres
            group: postgres
            mode: '0700'
          
        - name: Copy pg_hba.conf template to primary node
          ansible.builtin.template:
            src: files/pg_hba.conf.j2
            dest: "/var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf"
            owner: postgres
            group: postgres
            mode: '0600'
          notify: Reload PostgreSQL

        - name: Create replication user
          community.postgresql.postgresql_user:
            state: present
            name: "{{ replication_user }}"
            password: "{{ replication_password }}"
            role_attr_flags: REPLICATION
          become: yes
          become_user: postgres

        - name: Create application user and database
          community.postgresql.postgresql_user:
            state: present
            name: "{{ db_user }}"
            password: "{{ db_password }}"
          become: yes
          become_user: postgres

        - name: Create application database
          community.postgresql.postgresql_db:
            name: "appdb"
            owner: "{{ db_user }}"
          become: yes
          become_user: postgres
      tags:
        - primary_config

    # ----------------------------------
    # Section 2: Replica Node Configuration (run on the second database VM)
    # ----------------------------------
    - name: Configure replica node for streaming replication
      when: inventory_hostname == groups['database'][1]
      block:
        - name: Stop PostgreSQL service on replica
          ansible.builtin.service:
            name: "postgresql-{{ postgres_version }}"
            state: stopped

        - name: Backup existing data directory
          ansible.builtin.command: "mv /var/lib/pgsql/{{ postgres_version }}/data /var/lib/pgsql/{{ postgres_version }}/data_backup"
          args:
            creates: "/var/lib/pgsql/{{ postgres_version }}/data_backup"

        - name: Perform base backup from primary
          ansible.builtin.command: >
            /usr/pgsql-{{ postgres_version }}/bin/pg_basebackup -h {{ hostvars[groups['database'][0]]['ansible_host'] }} -U {{ replication_user }} -D /var/lib/pgsql/{{ postgres_version }}/data -P -v -R
          become: yes
          become_user: postgres
          register: pg_basebackup_result
          failed_when: "'FATAL' in pg_basebackup_result.stderr"
          
        - name: Start PostgreSQL service on replica
          ansible.builtin.service:
            name: "postgresql-{{ postgres_version }}"
            state: started
            enabled: yes
      tags:
        - replica_config

    # ----------------------------------
    # Section 3: Verification (run on the primary node)
    # ----------------------------------
    - name: Verify streaming replication is active
      when: inventory_hostname == groups['database'][0]
      block:
        - name: Check replication status on primary
          ansible.builtin.command: psql -c "SELECT pid, state, client_addr FROM pg_stat_replication;"
          become: yes
          become_user: postgres
          register: replication_status
          changed_when: false

        - name: Display replication status
          ansible.builtin.debug:
            var: replication_status.stdout
      tags:
        - verify

  handlers:
    - name: Restart PostgreSQL
      ansible.builtin.service:
        name: "postgresql-{{ postgres_version }}"
        state: restarted

    - name: Reload PostgreSQL
      ansible.builtin.service:
        name: "postgresql-{{ postgres_version }}"
        state: reloaded