---
- name: Kubernetes Cluster Setup
  hosts: kubernetes
  become: yes
  vars:
    # Pod and Service CIDRs
    pod_network_cidr: "10.42.0.0/16"
    service_cidr: "10.43.0.0/16"
    
  tasks:
    # ----------------------------------
    # Section 1: Common Tasks for All Nodes
    # ----------------------------------

    - name: Update all packages to the latest version
      ansible.builtin.yum:
        name: '*'
        state: latest
        update_cache: yes
      tags:
        - common

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      tags:
        - common

    - name: Disable swap
      ansible.builtin.shell: swapoff -a
      when: ansible_swaptotal_mb > 0
      tags:
        - common
    
    - name: Comment out swap entries in /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(/dev/[^ ]+ swap .*)$'
        replace: '#\1'
      tags:
        - common

    - name: Add Kubernetes Yum repository
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
        gpgcheck: yes
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
        enabled: yes
      tags:
        - common

    - name: Install required packages (containerd, kubelet, kubeadm, kubectl)
      ansible.builtin.yum:
        name:
          - containerd
          - kubelet
          - kubeadm
          - kubectl
        state: present
      tags:
        - common

    - name: Configure containerd and set systemd cgroup driver
      block:
        - name: Generate default containerd config
          ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
          args:
            creates: /etc/containerd/config.toml
        - name: Enable systemd cgroup driver
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: '            SystemdCgroup = false'
            line: '            SystemdCgroup = true'
          notify: Restart containerd
      tags:
        - common

    - name: Enable and start containerd and kubelet services
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - containerd
        - kubelet
      tags:
        - common

    - name: Add sysctl settings for Kubernetes networking
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        group: root
        mode: '0644'
      notify: Reload sysctl
      tags:
        - common

    - name: Apply sysctl settings immediately
      ansible.builtin.command: sysctl --system
      tags:
        - common

    # ----------------------------------
    # Section 2: Control Plane Initialization
    # ----------------------------------

    - name: Initialize the Kubernetes control plane on the first node
      ansible.builtin.command: >
        kubeadm init --pod-network-cidr={{ pod_network_cidr }} --service-cidr={{ service_cidr }} --control-plane-endpoint="{{ hostvars[groups['load_balancers'][0]]['ansible_host'] }}:6443"
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init_output
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      tags:
        - control_plane
      
    - name: Create .kube directory for cloud-user
      ansible.builtin.file:
        path: /home/cloud-user/.kube
        state: directory
        mode: '0755'
        owner: cloud-user
        group: cloud-user
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      tags:
        - control_plane

    - name: Copy kubeconfig to cloud-user's home directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/cloud-user/.kube/config
        remote_src: yes
        owner: cloud-user
        group: cloud-user
        mode: '0600'
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      tags:
        - control_plane

    - name: Get worker node join command
      ansible.builtin.shell: >
        kubeadm token create --print-join-command
      register: worker_join_command
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      tags:
        - control_plane
      
    - name: Store worker join command fact
      ansible.builtin.set_fact:
        join_command_worker: "{{ worker_join_command.stdout }}"
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      delegate_to: localhost
      run_once: true

    # ----------------------------------
    # Section 3: Worker Node Joining
    # ----------------------------------
      
    - name: Join worker nodes to the cluster
      ansible.builtin.command: "{{ hostvars[groups['kubernetes_control_plane'][0]]['join_command_worker'] }}"
      when: inventory_hostname in groups['kubernetes_workers']
      tags:
        - workers

    # ----------------------------------
    # Section 4: Pod Network Installation (Calico)
    # ----------------------------------

    - name: Install Calico Pod Network
      ansible.builtin.command: >
        kubectl apply -f https://docs.tigera.io/calico/3.26/manifests/calico.yaml
      become_user: cloud-user
      when: inventory_hostname == groups['kubernetes_control_plane'][0]
      tags:
        - calico